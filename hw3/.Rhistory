head(move)
move[, brand_name := ifelse(brand_code_uc == selected_brand, "own", "comp")]
head(move)
move_agg <- move[, .(quantity = sum(quantity), price = mean(price), promotion = mean(promotion)), by = .(store_code_uc, week_end, brand_name)]
head(move_agg)
move_agg <- merge(move_agg, stores_dma[, .(store_code_uc, dma_code)], by = "store_code_uc", all.x = TRUE)
head(move_agg)
set.seed(444)
DT = data.table(dma  = rep(LETTERS[1:2], each = 5),
week = 1:5,
x    = round(runif(10, min = 0, max =20)))
DT = DT[-c(2, 5, 9)]
DT
setkey(DT, dma, week)
DT = DT[CJ(c("A", "B"), 1:5)]
DT
DT[is.na(DT)] = -111
DT
brands    = unique(adv_DT$brand_code_uc)
dma_codes = unique(adv_DT$dma_code)
weeks     = seq(from = min(adv_DT$week_end), to = max(adv_DT$week_end), by = "week")
setkey(adv_DT, dma_code, week_end, brand_code_uc)
adv_DT_all <- adv_DT[CJ(dma_code = dma_codes, week_end = weeks, brand_name = brands)]
adv_DT_all[is.na(grp_direct), grp_direct := 0]
adv_DT_all[is.na(grp_indirect), grp_indirect := 0]
adv_DT_all[, brand_name := ifelse(brand_code_uc == selected_brand, "own", "comp")]
adv_DT_all <- adv_DT_all[, .(grp_direct = sum(grp_direct), grp_indirect = sum(grp_indirect)), by = .(dma_code, week_end, brand_name)]
adv_DT_all[, grp := grp_direct + grp_indirect]
head(adv_DT_all)
N_lags = 52
delta  = 0.7
geom_weights = cumprod(c(1.0, rep(delta, times = N_lags)))
geom_weights = sort(geom_weights)
tail(geom_weights)
setkey(adv_DT_all, brand_name, dma_code, week_end)
adv_DT_all[, adstock := roll_sum(log(1+grp), n = N_lags+1, weights = geom_weights,
normalize = FALSE, align = "right",  fill = NA),
by = .(brand_name, dma_code)]
weightedSum <- function(x, w) {
T = length(x)
L = length(w) - 1
y = rep_len(NA, T)
for (i in (L+1):T) y[i] = sum(x[(i-L):i]*w)
return(y)
}
time_a = system.time(adv_DT_all[, stock_a := weightedSum(log(1+grp), geom_weights),
by = .(brand_name, dma_code)])
time_b = system.time(adv_DT_all[, stock_b := roll_sum(log(1+grp), n = N_lags+1,
weights = geom_weights,
normalize = FALSE,
align = "right",  fill = NA),
by = .(brand_name, dma_code)])
(time_a/time_b)[3]
# Check the structure of the scanner data (move_agg)
str(move_agg)
# Check the structure of the advertising data (adv_DT_all)
str(adv_DT_all)
# Ensure that the `week_end` columns in both datasets are of Date type
move_agg[, week_end := as.Date(week_end)]
adv_DT_all[, week_end := as.Date(week_end)]
# Perform the merge
merged_data <- merge(adv_DT_all, move_agg,
by = c("brand_name", "dma_code", "week_end"),
all.x = TRUE,
all.y = FALSE)
# Check the result of the merge
head(merged_data)
# No need ??
# Replace missing adstock values with zero
# merged_data[is.na(adstock), adstock := 0]
# Replace missing GRP values with zero as well
# merged_data[is.na(grp), grp := 0]
# Disregard the missing store_code_uc rows
merged_data <- merged_data[complete.cases(store_code_uc)]
# Find rows where the combination is duplicated
duplicates <- merged_data[duplicated(merged_data[, .(store_code_uc, week_end, brand_name)]), ]
duplicates
dim(merged_data) # before merged
# Reshape the data from long to wide format using dcast
reshaped_data <- dcast(merged_data, store_code_uc + week_end ~ brand_name,
value.var = c("quantity", "price", "promotion", "adstock", "grp"))
# Remove rows with missing values using complete.cases
cleaned_data <- reshaped_data[complete.cases(reshaped_data)]
# Check the cleaned data
summary(cleaned_data)
# Check the structure of the cleaned dataset
str(cleaned_data)
# View a sample of the cleaned data
head(cleaned_data)
knitr::opts_chunk$set(echo = TRUE, comment = NA, message = FALSE,
fig.width = 4.5, fig.height = 3, fig.align = "right")
# install.packages("RcppRoll")
library(bit64)
library(data.table)
library(RcppRoll)
library(ggplot2)
library(fixest)
library(knitr)
library(dplyr)
#data_folder = "/Users/tracy/Desktop/BUSN37105/Data Files"
data_folder = "Data"
brands_file = "Brands_a3.RData"
stores_file = "stores_dma.RData"
move_file  = "move_8412.RData"
adv_file = "adv_8412.RData"
selected_module = 8412
selected_brand  = 621727
load(paste0(data_folder, "/", brands_file))
load(paste0(data_folder, "/", stores_file))
load(paste0(data_folder, "/", move_file))
load(paste0(data_folder, "/", adv_file))
setnames(move, old = c("units", "promo_percentage"), new = c("quantity", "promotion"))
head(move)
move[, brand_name := ifelse(brand_code_uc == selected_brand, "own", "comp")]
head(move)
move_agg <- move[, .(quantity = sum(quantity), price = mean(price), promotion = mean(promotion)), by = .(store_code_uc, week_end, brand_name)]
head(move_agg)
move_agg <- merge(move_agg, stores_dma[, .(store_code_uc, dma_code)], by = "store_code_uc", all.x = TRUE)
head(move_agg)
set.seed(444)
DT = data.table(dma  = rep(LETTERS[1:2], each = 5),
week = 1:5,
x    = round(runif(10, min = 0, max =20)))
DT = DT[-c(2, 5, 9)]
DT
setkey(DT, dma, week)
DT = DT[CJ(c("A", "B"), 1:5)]
DT
DT[is.na(DT)] = -111
DT
brands    = unique(adv_DT$brand_code_uc)
dma_codes = unique(adv_DT$dma_code)
weeks     = seq(from = min(adv_DT$week_end), to = max(adv_DT$week_end), by = "week")
setkey(adv_DT, dma_code, week_end, brand_code_uc)
adv_DT_all <- adv_DT[CJ(dma_code = dma_codes, week_end = weeks, brand_name = brands)]
adv_DT_all[is.na(grp_direct), grp_direct := 0]
adv_DT_all[is.na(grp_indirect), grp_indirect := 0]
adv_DT_all[, brand_name := ifelse(brand_code_uc == selected_brand, "own", "comp")]
adv_DT_all <- adv_DT_all[, .(grp_direct = sum(grp_direct), grp_indirect = sum(grp_indirect)), by = .(dma_code, week_end, brand_name)]
adv_DT_all[, grp := grp_direct + grp_indirect]
head(adv_DT_all)
N_lags = 52
delta  = 0.7
geom_weights = cumprod(c(1.0, rep(delta, times = N_lags)))
geom_weights = sort(geom_weights)
tail(geom_weights)
setkey(adv_DT_all, brand_name, dma_code, week_end)
adv_DT_all[, adstock := roll_sum(log(1+grp), n = N_lags+1, weights = geom_weights,
normalize = FALSE, align = "right",  fill = NA),
by = .(brand_name, dma_code)]
weightedSum <- function(x, w) {
T = length(x)
L = length(w) - 1
y = rep_len(NA, T)
for (i in (L+1):T) y[i] = sum(x[(i-L):i]*w)
return(y)
}
time_a = system.time(adv_DT_all[, stock_a := weightedSum(log(1+grp), geom_weights),
by = .(brand_name, dma_code)])
time_b = system.time(adv_DT_all[, stock_b := roll_sum(log(1+grp), n = N_lags+1,
weights = geom_weights,
normalize = FALSE,
align = "right",  fill = NA),
by = .(brand_name, dma_code)])
(time_a/time_b)[3]
# Check the structure of the scanner data (move_agg)
str(move_agg)
# Check the structure of the advertising data (adv_DT_all)
str(adv_DT_all)
# Ensure that the `week_end` columns in both datasets are of Date type
move_agg[, week_end := as.Date(week_end)]
adv_DT_all[, week_end := as.Date(week_end)]
# Perform the merge
merged_data <- merge(adv_DT_all, move_agg,
by = c("brand_name", "dma_code", "week_end"),
all.x = TRUE,
all.y = FALSE)
# Check the result of the merge
head(merged_data)
# No need ??
# Replace missing adstock values with zero
# merged_data[is.na(adstock), adstock := 0]
# Replace missing GRP values with zero as well
# merged_data[is.na(grp), grp := 0]
# Disregard the missing store_code_uc rows
merged_data <- merged_data[complete.cases(store_code_uc)]
# Find rows where the combination is duplicated
duplicates <- merged_data[duplicated(merged_data[, .(store_code_uc, week_end, brand_name)]), ]
duplicates
dim(merged_data) # before merged
# Reshape the data from long to wide format using dcast
reshaped_data <- dcast(merged_data, store_code_uc + week_end ~ brand_name,
value.var = c("quantity", "price", "promotion", "adstock", "grp"))
# Remove rows with missing values using complete.cases
cleaned_data <- reshaped_data[complete.cases(reshaped_data)]
# Check the cleaned data
summary(cleaned_data)
# Check the structure of the cleaned dataset
str(cleaned_data)
# View a sample of the cleaned data
head(cleaned_data)
library(lubridate)
# Ensure the 'week_end' column is in Date format
cleaned_data[, week_end := as.Date(week_end)]
# Create a month index based on the year and month of the 'week_end' column
cleaned_data[, month_index := 12 * (year(week_end) - 2011) + month(week_end)]
# View a sample of the cleaned dataset with the new month_index
head(cleaned_data)
# Verify the range of month_index values
summary(cleaned_data$month_index)
# Check for a sample of the month_index column alongside the week_end column
cleaned_data[, .(week_end, month_index)][1:10]
# check store 602
unique(stores_dma[, .(dma_code, dma_descr)])
merged_dma_data <- merge(cleaned_data, stores_dma, by = "store_code_uc", all.x = TRUE)
# Filter the data for the selected DMA (Chicago with dma_code 602)
chicago_data <- merged_dma_data[dma_code == 602, ]
# Plot time-series of weekly adstock for 'own' and 'comp'
ggplot(chicago_data, aes(x = week_end)) +
geom_line(aes(y = grp_own, color = "Own Brand")) +
geom_line(aes(y = grp_comp, color = "Competitor Brand")) +
labs(
title = "Weekly Adstock for Own and Competitor Brands",
x = "Week End Date",
y = "Adstock",
color = "Brand"
) +
theme_minimal()
long_data <- melt(
chicago_data,
id.vars = c("store_code_uc", "week_end", "dma_code", "dma_descr", "month_index"),
measure.vars = list(grp = c("grp_comp", "grp_own")),
variable.name = "brand_type",
value.name = "grp"
)
long_data[, brand_type := ifelse(brand_type == "grp_comp", "Competitor", "Own")]
ggplot(long_data, aes(x = week_end, y = grp, color = brand_type)) +
geom_line() +
labs(
title = "Weekly GRPs for Own and Competitor Brands",
x = "Week End Date",
y = "GRPs",
color = "Brand Type"
) +
facet_wrap(~ brand_type) +  # Facet by brand type (Own vs Competitor)
theme_minimal()
# Calculate the DMA-level mean of grp and create normalized_grp
chicago_data <- chicago_data %>%
group_by(dma_code) %>%
mutate(mean_grp = mean(c(grp_own, grp_comp), na.rm = TRUE)) %>%
ungroup() %>%
mutate(
normalized_grp_own = 100 * grp_own / mean_grp,
normalized_grp_comp = 100 * grp_comp / mean_grp
)
# Reshape to long format for plotting both variables
library(tidyverse)
long_normalized <- chicago_data %>%
select(dma_code, normalized_grp_own, normalized_grp_comp) %>%
pivot_longer(cols = starts_with("normalized_grp"), names_to = "brand_type", values_to = "normalized_grp")
# Plot histogram of normalized_grp for both own and competitor
ggplot(long_normalized, aes(x = normalized_grp, fill = brand_type)) +
geom_histogram(binwidth = 5, alpha = 0.7, position = "identity") +
labs(
title = "Histogram of Normalized GRP",
x = "Normalized GRP (%)",
y = "Frequency",
fill = "Brand Type"
) +
scale_x_continuous(limits = c(0, 200)) +  # Set x-axis limits to exclude extreme values
facet_wrap(~ brand_type) +
theme_minimal() +
theme(
plot.title = element_text(size = 6),
axis.title.x = element_text(size = 6),
axis.title.y = element_text(size = 6),
axis.text.x = element_text(size = 6, angle = 45, hjust = 1),
axis.text.y = element_text(size = 6),
legend.title = element_text(size = 6),
legend.text = element_text(size = 6)
)
# Load necessary library
library(fixest)
# Assuming your data is named 'data'
# Convert quantity, price, and promotion columns to appropriate log-transformed values
# when fitting the model
# Base specification model
base_model <- feols(
log(1 + quantity_own) ~ log(price_own) + log(price_comp) + promotion_own |
store_code_uc + month_index,  # Fixed effects for store and month/year
data = chicago_data
)
# Display summary of the model results
summary(base_model)
# Load necessary library
library(fixest)
# Assuming your data is named 'data'
# Updated specification with adstock variables for own and competitor
# Specification with adstock
model_with_adstock <- feols(
log(1 + quantity_own) ~ log(price_own) + log(price_comp) + promotion_own + adstock_own + adstock_comp |
store_code_uc + month_index,  # Fixed effects for store and month/year
data = chicago_data
)
# Display summary of the model results
summary(model_with_adstock)
# Load necessary library
library(fixest)
# Assuming your data is named 'data'
# Specification with adstock variables for own and competitor, without time fixed effects
model_without_time_fixed_effects <- feols(
log(1 + quantity_own) ~ log(price_own) + log(price_comp) + promotion_own + adstock_own + adstock_comp |
store_code_uc,  # Fixed effects for store only
data = chicago_data
)
# Display summary of the model results
summary(model_without_time_fixed_effects)
etable(base_model, model_with_adstock, model_without_time_fixed_effects)
long_data[, brand_type := ifelse(brand_type == "grp_comp", "Competitor", "Own")]
ggplot(long_data, aes(x = week_end, y = grp, color = brand_type)) +
geom_line() +
labs(
title = "Weekly GRPs for Own and Competitor Brands",
x = "Week End Date",
y = "GRPs",
color = "Brand Type"
) +
facet_wrap(~ brand_type) +  # Facet by brand type (Own vs Competitor)
theme_minimal() +
theme(
plot.title = element_text(size = 6),
axis.title.x = element_text(size = 6),
axis.title.y = element_text(size = 6),
axis.text.x = element_text(size = 6, angle = 45, hjust = 1),
axis.text.y = element_text(size = 6),
legend.title = element_text(size = 6),
legend.text = element_text(size = 6)
)
long_data[, brand_type := ifelse(brand_type == "grp_comp", "Competitor", "Own")]
ggplot(long_data, aes(x = week_end, y = grp, color = brand_type)) +
geom_line() +
labs(
title = "Weekly GRPs for Own and Competitor Brands",
x = "Week End Date",
y = "GRPs",
color = "Brand Type"
) +
facet_wrap(~ brand_type) +  # Facet by brand type (Own vs Competitor)
theme_minimal() +
long_data[, brand_type := ifelse(brand_type == "grp_comp", "Competitor", "Own")]
ggplot(long_data, aes(x = week_end, y = grp, color = brand_type)) +
geom_line() +
labs(
title = "Weekly GRPs for Own and Competitor Brands",
x = "Week End Date",
y = "GRPs",
color = "Brand Type"
) +
facet_wrap(~ brand_type) +  # Facet by brand type (Own vs Competitor)
theme_minimal()
merged_dma_data <- merge(cleaned_data, stores_dma, by = "store_code_uc", all.x = TRUE)
# Filter the data for the selected DMA (Chicago with dma_code 602)
chicago_data <- merged_dma_data[dma_code == 602, ]
# Plot time-series of weekly adstock for 'own' and 'comp'
ggplot(chicago_data, aes(x = week_end)) +
geom_line(aes(y = grp_own, color = "Own Brand")) +
geom_line(aes(y = grp_comp, color = "Competitor Brand")) +
labs(
title = "Weekly Adstock for Own and Competitor Brands",
x = "Week End Date",
y = "Adstock",
color = "Brand"
) +
theme_minimal()
long_data[, brand_type := ifelse(brand_type == "grp_comp", "Competitor", "Own")]
ggplot(long_data, aes(x = week_end, y = grp, color = brand_type)) +
geom_line() +
labs(
title = "Weekly GRPs for Own and Competitor Brands",
x = "Week End Date",
y = "GRPs",
color = "Brand Type"
) +
facet_wrap(~ brand_type) +  # Facet by brand type (Own vs Competitor)
theme_minimal() +
theme(
plot.title = element_text(size = 6),
axis.title.x = element_text(size = 6),
axis.title.y = element_text(size = 6),
axis.text.x = element_text(size = 6, angle = 45, hjust = 1),
axis.text.y = element_text(size = 6),
legend.title = element_text(size = 6),
legend.text = element_text(size = 6)
)
long_data <- melt(
chicago_data,
id.vars = c("store_code_uc", "week_end", "dma_code", "dma_descr", "month_index"),
measure.vars = list(grp = c("grp_comp", "grp_own")),
variable.name = "brand_type",
value.name = "grp"
)
merged_dma_data <- merge(cleaned_data, stores_dma, by = "store_code_uc", all.x = TRUE)
# Filter the data for the selected DMA (Chicago with dma_code 602)
chicago_data <- merged_dma_data[dma_code == 602, ]
# Plot time-series of weekly adstock for 'own' and 'comp'
ggplot(chicago_data, aes(x = week_end)) +
geom_line(aes(y = grp_own, color = "Own Brand")) +
geom_line(aes(y = grp_comp, color = "Competitor Brand")) +
labs(
title = "Weekly Adstock for Own and Competitor Brands",
x = "Week End Date",
y = "Adstock",
color = "Brand"
) +
theme_minimal()
long_data <- melt(
chicago_data,
id.vars = c("store_code_uc", "week_end", "dma_code", "dma_descr", "month_index"),
measure.vars = list(grp = c("grp_comp", "grp_own")),
variable.name = "brand_type",
value.name = "grp"
)
long_data[, brand_type := ifelse(brand_type == "grp_comp", "Competitor", "Own")]
ggplot(long_data, aes(x = week_end, y = grp, color = brand_type)) +
geom_line() +
labs(
title = "Weekly GRPs for Own and Competitor Brands",
x = "Week End Date",
y = "GRPs",
color = "Brand Type"
) +
facet_wrap(~ brand_type) +  # Facet by brand type (Own vs Competitor)
theme_minimal()
ggplot(long_data, aes(x = week_end, y = grp, color = brand_type)) +
geom_line() +
labs(
title = "Weekly GRPs for Own and Competitor Brands",
x = "Week End Date",
y = "GRPs",
color = "Brand Type"
) +
facet_wrap(~ brand_type) +  # Facet by brand type (Own vs Competitor)
theme_minimal() +
theme(
plot.title = element_text(size = 6),
axis.title.x = element_text(size = 6),
axis.title.y = element_text(size = 6),
axis.text.x = element_text(size = 6, angle = 45, hjust = 1),
axis.text.y = element_text(size = 6),
legend.title = element_text(size = 6),
legend.text = element_text(size = 6)
)
# Plot time-series of weekly adstock for 'own' and 'comp'
ggplot(chicago_data, aes(x = week_end)) +
geom_line(aes(y = grp_own, color = "Own Brand")) +
geom_line(aes(y = grp_comp, color = "Competitor Brand")) +
labs(
title = "Weekly Adstock for Own and Competitor Brands",
x = "Week End Date",
y = "Adstock",
color = "Brand"
) +
facet_wrap(~ brand_type) +  # Facet by brand type (Own vs Competitor)
theme_minimal() +
theme(
plot.title = element_text(size = 6),
axis.title.x = element_text(size = 6),
axis.title.y = element_text(size = 6),
axis.text.x = element_text(size = 6, angle = 45, hjust = 1),
axis.text.y = element_text(size = 6),
legend.title = element_text(size = 6),
legend.text = element_text(size = 6)
)
# check store 602
unique(stores_dma[, .(dma_code, dma_descr)])
merged_dma_data <- merge(cleaned_data, stores_dma, by = "store_code_uc", all.x = TRUE)
# Filter the data for the selected DMA (Chicago with dma_code 602)
chicago_data <- merged_dma_data[dma_code == 602, ]
merged_dma_data <- merge(cleaned_data, stores_dma, by = "store_code_uc", all.x = TRUE)
# Filter the data for the selected DMA (Chicago with dma_code 602)
chicago_data <- merged_dma_data[dma_code == 602, ]
# Plot time-series of weekly adstock for 'own' and 'comp'
ggplot(chicago_data, aes(x = week_end)) +
geom_line(aes(y = grp_own, color = "Own Brand")) +
geom_line(aes(y = grp_comp, color = "Competitor Brand")) +
labs(
title = "Weekly Adstock for Own and Competitor Brands",
x = "Week End Date",
y = "Adstock",
color = "Brand"
) +
facet_wrap(~ brand_type) +  # Facet by brand type (Own vs Competitor)
theme_minimal() +
theme(
plot.title = element_text(size = 6),
axis.title.x = element_text(size = 6),
axis.title.y = element_text(size = 6),
axis.text.x = element_text(size = 6, angle = 45, hjust = 1),
axis.text.y = element_text(size = 6),
legend.title = element_text(size = 6),
legend.text = element_text(size = 6)
)
# Plot time-series of weekly adstock for 'own' and 'comp'
ggplot(chicago_data, aes(x = week_end)) +
geom_line(aes(y = grp_own, color = "Own Brand")) +
geom_line(aes(y = grp_comp, color = "Competitor Brand")) +
labs(
title = "Weekly Adstock for Own and Competitor Brands",
x = "Week End Date",
y = "Adstock",
color = "Brand"
)
