group_summary <- group_summary[order(score_group)]
group_summary[, total_program_value_gamma_0.5 := max_spend_gamma_0.5 * num_customers]
group_summary[, total_program_value_gamma_0.25 := max_spend_gamma_0.25 * num_customers]
# View the updated table
kable(group_summary[, 1:6])
kable(group_summary[, 7:ncol])
# Calculate metrics for each group
group_summary <- validation_data[, .(
num_customers = .N,  # Count the number of rows (customers) in each group
avg_churn_rate = mean(churn_rate_yearly),
avg_revenue = mean(revenue_yearly),
avg_ltv = calculate_ltv(mean(revenue_yearly), mean(churn_rate_yearly),
discount_rate, horizon)
), by = score_group]
# Add program values for different success probabilities
# If gamma = 0.25, the program is expected to succeed for 25% of the customers it
# targets,so only 25% of the LTV is realized.
# Program value shows the expected realized benefit
group_summary[, program_value_gamma_0.25 := 0.25 * avg_ltv]
group_summary[, program_value_gamma_0.5 := 0.5 * avg_ltv]
# Add max_spend per each program to the table
group_summary[, max_spend_gamma_0.25 := program_value_gamma_0.25 / horizon]
group_summary[, max_spend_gamma_0.5 := program_value_gamma_0.5 / horizon]
group_summary <- group_summary[order(score_group)]
group_summary[, total_program_value_gamma_0.5 := max_spend_gamma_0.5 * num_customers]
group_summary[, total_program_value_gamma_0.25 := max_spend_gamma_0.25 * num_customers]
# View the updated table
kable(group_summary[, 1:6])
kable(group_summary[, 7:ncol(group_summary)])
# Select high-risk, high-value group to enter the program
# Step 1: Filter for high-risk groups (avg_churn_rate > 0.2)
high_risk_groups <- group_summary[avg_churn_rate > 0.2]
# Step 2: Prioritize by program value
prioritized_groups <- high_risk_groups[order(-program_value_gamma_0.5)]
kable(prioritized_groups[, 1:6])
kable(prioritized_groups[, 7:ncol(group_summary)])
install.packages("kableExtra")
library(bit64)
library(data.table)
library(ggplot2)
library(broom)
library(knitr)
library(dplyr)
library(kableExtra)
group_summary %>%
kable() %>%
kable_styling(font_size = 8)
library(bit64)
library(data.table)
library(ggplot2)
library(broom)
library(knitr)
library(dplyr)
library(kableExtra)
# Select high-risk, high-value group to enter the program
# Step 1: Filter for high-risk groups (avg_churn_rate > 0.2)
high_risk_groups <- group_summary[avg_churn_rate > 0.2]
# Step 2: Prioritize by program value
prioritized_groups <- high_risk_groups[order(-program_value_gamma_0.5)]
prioritized_groups %>%
kable() %>%
kable_styling(font_size = 8)
# Select high-risk, high-value group to enter the program
# Step 1: Filter for high-risk groups (avg_churn_rate > 0.2)
high_risk_groups <- group_summary[avg_churn_rate > 0.2]
# Step 2: Prioritize by program value
prioritized_groups <- high_risk_groups[order(-program_value_gamma_0.5)]
kable(prioritized_groups[, 1:6]) %>%
kable_styling(font_size = 8)
kable(prioritized_groups[, 7:ncol(group_summary)]) %>%
kable_styling(font_size = 8)
# Select high-risk, high-value group to enter the program
# Step 1: Filter for high-risk groups (avg_churn_rate > 0.2)
high_risk_groups <- group_summary[avg_churn_rate > 0.2]
# Step 2: Prioritize by program value
prioritized_groups <- high_risk_groups[order(-program_value_gamma_0.5)]
kable(prioritized_groups[, 1:6]) %>%
kable_styling(font_size = 8) %>%
column_spec(1:6, angle = 45)
# Select high-risk, high-value group to enter the program
# Step 1: Filter for high-risk groups (avg_churn_rate > 0.2)
high_risk_groups <- group_summary[avg_churn_rate > 0.2]
# Step 2: Prioritize by program value
prioritized_groups <- high_risk_groups[order(-program_value_gamma_0.5)]
kable(prioritized_groups[, 1:6]) %>%
kable_styling(font_size = 8) %>%
column_spec(1:6, angle = 45)
# Select high-risk, high-value group to enter the program
# Step 1: Filter for high-risk groups (avg_churn_rate > 0.2)
high_risk_groups <- group_summary[avg_churn_rate > 0.2]
# Step 2: Prioritize by program value
prioritized_groups <- high_risk_groups[order(-program_value_gamma_0.5)]
kable(prioritized_groups[, 1:6]) %>%
kable_styling(font_size = 8), full_width = FALSE) %>%
# Select high-risk, high-value group to enter the program
# Step 1: Filter for high-risk groups (avg_churn_rate > 0.2)
high_risk_groups <- group_summary[avg_churn_rate > 0.2]
# Step 2: Prioritize by program value
prioritized_groups <- high_risk_groups[order(-program_value_gamma_0.5)]
kable(prioritized_groups[, 1:6]) %>%
kable_styling(font_size = 8, full_width = FALSE) %>%
column_spec(1:6, angle = 45)
# Select high-risk, high-value group to enter the program
# Step 1: Filter for high-risk groups (avg_churn_rate > 0.2)
high_risk_groups <- group_summary[avg_churn_rate > 0.2]
# Step 2: Prioritize by program value
prioritized_groups <- high_risk_groups[order(-program_value_gamma_0.5)]
kable(prioritized_groups[, 1:6]) %>%
kable_styling(font_size = 8)
kable(prioritized_groups[, 7:ncol(prioritized_groups)]) %>%
kable_styling(font_size = 8)
# Calculate metrics for each group
group_summary <- validation_data[, .(
num_customers = .N,  # Count the number of rows (customers) in each group
avg_churn_rate = mean(churn_rate_yearly),
avg_revenue = mean(revenue_yearly),
avg_ltv = calculate_ltv(mean(revenue_yearly), mean(churn_rate_yearly),
discount_rate, horizon)
), by = score_group]
# Add program values for different success probabilities
# If gamma = 0.25, the program is expected to succeed for 25% of the customers it
# targets,so only 25% of the LTV is realized.
# Program value shows the expected realized benefit
group_summary[, program_value_gamma_0.25 := 0.25 * avg_ltv]
group_summary[, program_value_gamma_0.5 := 0.5 * avg_ltv]
# Add max_spend per each program to the table
group_summary[, max_spend_gamma_0.25 := program_value_gamma_0.25 / horizon]
group_summary[, max_spend_gamma_0.5 := program_value_gamma_0.5 / horizon]
group_summary <- group_summary[order(score_group)]
group_summary[, total_program_value_gamma_0.5 := max_spend_gamma_0.5 * num_customers]
group_summary[, total_program_value_gamma_0.25 := max_spend_gamma_0.25 * num_customers]
# View the updated table
kable(group_summary[, 1:6]) %>%
kable_styling(font_size = 8)
kable(group_summary[, 7:ncol(group_summary)]) %>%
kable_styling(font_size = 8)
# Find the Aggregate total max spending for the targeted group
# Aggregate total max spend for gamma = 0.5
total_program_value_gamma_0.5 <- sum(prioritized_groups$total_program_value_gamma_0.5)
# Aggregate total max spend for gamma = 0.25
total_program_value_gamma_0.25 <- sum(prioritized_groups$total_program_value_gamma_0.25)
cat("Total max spend represents is the cumulative justification for running
the churn management program across all selected groups. \n")
cat("Total max spend for program (gamma = 0.5) across selected group: $", total_program_value_gamma_0.5, "per year. \n")
cat("Total max spend for program (gamma = 0.25) across selected group: $", total_program_value_gamma_0.25, "per year. \n")
# Find the Aggregate total max spending for the targeted group
# Aggregate total max spend for gamma = 0.5
total_program_value_gamma_0.5 <- sum(prioritized_groups$total_program_value_gamma_0.5)
# Aggregate total max spend for gamma = 0.25
total_program_value_gamma_0.25 <- sum(prioritized_groups$total_program_value_gamma_0.25)
cat("Total max spend represents is the cumulative justification for running
the churn management program across all selected groups. \n")
cat("Total max spend for program (gamma = 0.5)
on selected group $",
total_program_value_gamma_0.5, "per year. \n")
cat("Total max spend for program (gamma = 0.25)
on selected group $",
total_program_value_gamma_0.25, "per year. \n")
# Select high-risk, high-value group to enter the program
# Step 1: Filter for high-risk groups (avg_churn_rate > 0.2)
high_risk_groups <- group_summary[avg_churn_rate > 0.2]
# Step 2: Prioritize by program value
prioritized_groups <- high_risk_groups[order(-program_value_gamma_0.5)]
kable(prioritized_groups[, 1:7], digits = 3) %>%
kable_styling(font_size = 8)
kable(prioritized_groups[, 8:ncol(prioritized_groups)], digits = 3) %>%
kable_styling(font_size = 8)
# Select high-risk, high-value group to enter the program
# Step 1: Filter for high-risk groups (avg_churn_rate > 0.2)
high_risk_groups <- group_summary[avg_churn_rate > 0.2]
# Step 2: Prioritize by program value
prioritized_groups <- high_risk_groups[order(-program_value_gamma_0.5)]
kable(prioritized_groups[, 1:7], digits = 2) %>%
kable_styling(font_size = 8)
kable(prioritized_groups[, 8:ncol(prioritized_groups)], digits = 3) %>%
kable_styling(font_size = 8)
# Calculate metrics for each group
group_summary <- validation_data[, .(
num_customers = .N,  # Count the number of rows (customers) in each group
avg_churn_rate = mean(churn_rate_yearly),
avg_revenue = mean(revenue_yearly),
avg_ltv = calculate_ltv(mean(revenue_yearly), mean(churn_rate_yearly),
discount_rate, horizon)
), by = score_group]
# Add program values for different success probabilities
# If gamma = 0.25, the program is expected to succeed for 25% of the customers it
# targets,so only 25% of the LTV is realized.
# Program value shows the expected realized benefit
group_summary[, program_value_gamma_0.25 := 0.25 * avg_ltv]
group_summary[, program_value_gamma_0.5 := 0.5 * avg_ltv]
# Add max_spend per each program to the table
group_summary[, max_spend_gamma_0.25 := program_value_gamma_0.25 / horizon]
group_summary[, max_spend_gamma_0.5 := program_value_gamma_0.5 / horizon]
group_summary <- group_summary[order(score_group)]
group_summary[, total_program_value_gamma_0.5 := max_spend_gamma_0.5 * num_customers]
group_summary[, total_program_value_gamma_0.25 := max_spend_gamma_0.25 * num_customers]
# View the updated table
kable(group_summary[, 1:7], digits = 2) %>%
kable_styling(font_size = 8)
kable(group_summary[, 8:ncol(group_summary), digits = 2]) %>%
kable_styling(font_size = 8)
# Calculate metrics for each group
group_summary <- validation_data[, .(
num_customers = .N,  # Count the number of rows (customers) in each group
avg_churn_rate = mean(churn_rate_yearly),
avg_revenue = mean(revenue_yearly),
avg_ltv = calculate_ltv(mean(revenue_yearly), mean(churn_rate_yearly),
discount_rate, horizon)
), by = score_group]
# Add program values for different success probabilities
# If gamma = 0.25, the program is expected to succeed for 25% of the customers it
# targets,so only 25% of the LTV is realized.
# Program value shows the expected realized benefit
group_summary[, program_value_gamma_0.25 := 0.25 * avg_ltv]
group_summary[, program_value_gamma_0.5 := 0.5 * avg_ltv]
# Add max_spend per each program to the table
group_summary[, max_spend_gamma_0.25 := program_value_gamma_0.25 / horizon]
group_summary[, max_spend_gamma_0.5 := program_value_gamma_0.5 / horizon]
group_summary <- group_summary[order(score_group)]
group_summary[, total_program_value_gamma_0.5 := max_spend_gamma_0.5 * num_customers]
group_summary[, total_program_value_gamma_0.25 := max_spend_gamma_0.25 * num_customers]
# View the updated table
kable(group_summary[, 1:7], digits = 2) %>%
kable_styling(font_size = 8)
kable(group_summary[, 8:ncol(group_summary)], digits = 2) %>%
kable_styling(font_size = 8)
# Calculate metrics for each group
group_summary <- validation_data[, .(
num_customers = .N,  # Count the number of rows (customers) in each group
avg_churn_rate = mean(churn_rate_yearly),
avg_revenue = mean(revenue_yearly),
avg_ltv = calculate_ltv(mean(revenue_yearly), mean(churn_rate_yearly),
discount_rate, horizon)
), by = score_group]
# Add program values for different success probabilities
# If gamma = 0.25, the program is expected to succeed for 25% of the customers it
# targets,so only 25% of the LTV is realized.
# Program value shows the expected realized benefit
group_summary[, program_value_gamma_0.25 := 0.25 * avg_ltv]
group_summary[, program_value_gamma_0.5 := 0.5 * avg_ltv]
# WTP
group_summary[, WTP_0.25 := program_value_gamma_0.25 - avg_ltv]
group_summary[, WTP_0.5 := program_value_gamma_0.5 - avg_ltv]
# Add max_spend per each program to the table
group_summary[, max_spend_gamma_0.25 := program_value_gamma_0.25 / horizon]
group_summary[, max_spend_gamma_0.5 := program_value_gamma_0.5 / horizon]
group_summary <- group_summary[order(score_group)]
group_summary[, total_program_value_gamma_0.5 := max_spend_gamma_0.5 * num_customers]
group_summary[, total_program_value_gamma_0.25 := max_spend_gamma_0.25 * num_customers]
# View the updated table
kable(group_summary[, 1:7], digits = 2) %>%
kable_styling(font_size = 8)
kable(group_summary[, 8:ncol(group_summary)], digits = 2) %>%
kable_styling(font_size = 8)
View(group_summary)
# Calculate metrics for each group
group_summary <- validation_data[, .(
num_customers = .N,  # Count the number of rows (customers) in each group
avg_churn_rate = mean(churn_rate_yearly),
avg_revenue = mean(revenue_yearly),
avg_ltv = calculate_ltv(mean(revenue_yearly), mean(churn_rate_yearly),
discount_rate, horizon)
), by = score_group]
# Add program values for different success probabilities
# If gamma = 0.25, the program is expected to succeed for 25% of the customers it
# targets,so only 25% of the LTV is realized.
# Program value shows the expected realized benefit
group_summary[, program_value_gamma_0.25 := 0.25 * avg_ltv]
group_summary[, program_value_gamma_0.5 := 0.5 * avg_ltv]
# WTP
group_summary[, WTP_0.25 := avg_ltv - program_value_gamma_0.25]
group_summary[, WTP_0.5 := avg_ltv - program_value_gamma_0.5]
# Add max_spend per each program to the table
group_summary[, max_spend_gamma_0.25 := program_value_gamma_0.25 / horizon]
group_summary[, max_spend_gamma_0.5 := program_value_gamma_0.5 / horizon]
group_summary <- group_summary[order(score_group)]
group_summary[, total_program_value_gamma_0.5 := max_spend_gamma_0.5 * num_customers]
group_summary[, total_program_value_gamma_0.25 := max_spend_gamma_0.25 * num_customers]
# View the updated table
kable(group_summary[, 1:7], digits = 2) %>%
kable_styling(font_size = 8)
kable(group_summary[, 8:ncol(group_summary)], digits = 2) %>%
kable_styling(font_size = 8)
# Calculate metrics for each group
group_summary <- validation_data[, .(
num_customers = .N,  # Count the number of rows (customers) in each group
avg_churn_rate = mean(churn_rate_yearly),
avg_revenue = mean(revenue_yearly),
avg_ltv = calculate_ltv(mean(revenue_yearly), mean(churn_rate_yearly),
discount_rate, horizon),
), by = score_group]
# Calculate metrics for each group
group_summary <- validation_data[, .(
avg_churn_rate = mean(churn_rate_yearly),
avg_revenue = mean(revenue_yearly),
avg_ltv = calculate_ltv(mean(revenue_yearly), mean(churn_rate_yearly),
discount_rate, horizon),
), by = score_group]
# Calculate metrics for each group
group_summary <- validation_data[, .(
avg_churn_rate = mean(churn_rate_yearly),
avg_revenue = mean(revenue_yearly),
avg_ltv = calculate_ltv(mean(revenue_yearly), mean(churn_rate_yearly),
discount_rate, horizon),
) by = score_group]
# Calculate metrics for each group
group_summary <- validation_data[, .(
avg_churn_rate = mean(churn_rate_yearly),
avg_revenue = mean(revenue_yearly),
avg_ltv = calculate_ltv(mean(revenue_yearly), mean(churn_rate_yearly),
discount_rate, horizon)
), by = score_group]
# Churn Rate with incentive
group_summary[, churn_0.25 := (1-0.25) * avg_churn_rate]
group_summary[, churn_0.5 := (1-0.5) * avg_churn_rate]
group_summary[, ltv_0.25 := calculate_ltv(avg_revenue, churn_0.25, discount_rate, horizon)]
group_summary[, ltv_0.5 := calculate_ltv(avg_revenue, churn_0.5, discount_rate, horizon)]
# Add program values for different success probabilities
# If gamma = 0.25, the program is expected to succeed for 25% of the customers it
# targets,so only 25% of the LTV is realized.
# Program value shows the expected realized benefit
group_summary[, program_value_gamma_0.25 := 0.25 * avg_ltv]
group_summary[, program_value_gamma_0.5 := 0.5 * avg_ltv]
# WTP
group_summary[, WTP_0.25 := avg_ltv - ltv_0.25]
group_summary[, WTP_0.5 := avg_ltv - ltv_0.5]
# Profitability if cost is 100
group_summary[, Profit_0.25_c100 := WTP_0.25 - 100]
group_summary[, Profit_0.5_c100 := WTP_0.5 - 100]
# Profitability if cost is 175
group_summary[, Profit_0.25_c175 := WTP_0.25 - 175]
group_summary[, Profit_0.5_c175 := WTP_0.5 - 175]
group_summary <- group_summary[order(score_group)]
# View the updated table
kable(group_summary[, 1:7], digits = 2) %>%
kable_styling(font_size = 8)
kable(group_summary[, 8:ncol(group_summary)], digits = 2) %>%
kable_styling(font_size = 8)
# Calculate metrics for each group
group_summary <- validation_data[, .(
avg_churn_rate = mean(churn_rate_yearly),
avg_revenue = mean(revenue_yearly),
avg_ltv = calculate_ltv(mean(revenue_yearly), mean(churn_rate_yearly),
discount_rate, horizon)
), by = score_group]
# Churn Rate with incentive
group_summary[, churn_0.25 := (1-0.25) * avg_churn_rate]
group_summary[, churn_0.5 := (1-0.5) * avg_churn_rate]
group_summary[, ltv_0.25 := calculate_ltv(avg_revenue, churn_0.25, discount_rate, horizon)]
group_summary[, ltv_0.5 := calculate_ltv(avg_revenue, churn_0.5, discount_rate, horizon)]
# Add program values for different success probabilities
# If gamma = 0.25, the program is expected to succeed for 25% of the customers it
# targets,so only 25% of the LTV is realized.
# Program value shows the expected realized benefit
group_summary[, program_value_gamma_0.25 := 0.25 * avg_ltv]
group_summary[, program_value_gamma_0.5 := 0.5 * avg_ltv]
# WTP
group_summary[, WTP_0.25 :=  ltv_0.25 - avg_ltv]
group_summary[, WTP_0.5 := ltv_0.5 - avg_ltv]
# Profitability if cost is 100
group_summary[, Profit_0.25_c100 := WTP_0.25 - 100]
group_summary[, Profit_0.5_c100 := WTP_0.5 - 100]
# Profitability if cost is 175
group_summary[, Profit_0.25_c175 := WTP_0.25 - 175]
group_summary[, Profit_0.5_c175 := WTP_0.5 - 175]
group_summary <- group_summary[order(score_group)]
# View the updated table
kable(group_summary[, 1:7], digits = 2) %>%
kable_styling(font_size = 8)
kable(group_summary[, 8:ncol(group_summary)], digits = 2) %>%
kable_styling(font_size = 8)
# Calculate metrics for each group
group_summary <- validation_data[, .(
avg_churn_rate = mean(churn_rate_yearly),
avg_revenue = mean(revenue_yearly),
avg_ltv = calculate_ltv(mean(revenue_yearly), mean(churn_rate_yearly),
discount_rate, horizon)
), by = score_group]
# Churn Rate with incentive
group_summary[, churn_0.25 := (1-0.25) * avg_churn_rate]
group_summary[, churn_0.5 := (1-0.5) * avg_churn_rate]
group_summary[, ltv_0.25 := calculate_ltv(avg_revenue, churn_0.25, discount_rate, horizon)]
group_summary[, ltv_0.5 := calculate_ltv(avg_revenue, churn_0.5, discount_rate, horizon)]
# WTP
group_summary[, WTP_0.25 :=  ltv_0.25 - avg_ltv]
group_summary[, WTP_0.5 := ltv_0.5 - avg_ltv]
# Profitability if cost is 100
group_summary[, Profit_g0.25_c100 := WTP_0.25 - 100]
group_summary[, Profit_g0.5_c100 := WTP_0.5 - 100]
# Profitability if cost is 175
group_summary[, Profit_g0.25_c175 := WTP_0.25 - 175]
group_summary[, Profit_g0.5_c175 := WTP_0.5 - 175]
group_summary <- group_summary[order(score_group)]
# View the updated table
kable(group_summary[, 1:7], digits = 2) %>%
kable_styling(font_size = 8)
kable(group_summary[, 8:ncol(group_summary)], digits = 2) %>%
kable_styling(font_size = 8)
# Calculate metrics for each group
group_summary <- validation_data[, .(
avg_churn_rate = mean(churn_rate_yearly),
avg_revenue = mean(revenue_yearly),
avg_ltv = calculate_ltv(mean(revenue_yearly), mean(churn_rate_yearly),
discount_rate, horizon)
), by = score_group]
# Churn Rate with incentive
group_summary[, churn_0.25 := (1-0.25) * avg_churn_rate]
group_summary[, churn_0.5 := (1-0.5) * avg_churn_rate]
group_summary[, ltv_0.25 := calculate_ltv(avg_revenue, churn_0.25, discount_rate, horizon)]
group_summary[, ltv_0.5 := calculate_ltv(avg_revenue, churn_0.5, discount_rate, horizon)]
# WTP
group_summary[, WTP_0.25 :=  ltv_0.25 - avg_ltv]
group_summary[, WTP_0.5 := ltv_0.5 - avg_ltv]
# Profitability if cost is 100
group_summary[, Profit_g0.25_c100 := WTP_0.25 - 100]
group_summary[, Profit_g0.5_c100 := WTP_0.5 - 100]
# Profitability if cost is 175
group_summary[, Profit_g0.25_c175 := WTP_0.25 - 175]
group_summary[, Profit_g0.5_c175 := WTP_0.5 - 175]
group_summary <- group_summary[order(WTP_0.5)]
# View the updated table
kable(group_summary[, 1:7], digits = 2) %>%
kable_styling(font_size = 8)
kable(group_summary[, 8:ncol(group_summary)], digits = 2) %>%
kable_styling(font_size = 8)
# Calculate metrics for each group
group_summary <- validation_data[, .(
avg_churn_rate = mean(churn_rate_yearly),
avg_revenue = mean(revenue_yearly),
avg_ltv = calculate_ltv(mean(revenue_yearly), mean(churn_rate_yearly),
discount_rate, horizon)
), by = score_group]
# Churn Rate with incentive
group_summary[, churn_0.25 := (1-0.25) * avg_churn_rate]
group_summary[, churn_0.5 := (1-0.5) * avg_churn_rate]
group_summary[, ltv_0.25 := calculate_ltv(avg_revenue, churn_0.25, discount_rate, horizon)]
group_summary[, ltv_0.5 := calculate_ltv(avg_revenue, churn_0.5, discount_rate, horizon)]
# WTP
group_summary[, WTP_0.25 :=  ltv_0.25 - avg_ltv]
group_summary[, WTP_0.5 := ltv_0.5 - avg_ltv]
# Profitability if cost is 100
group_summary[, Profit_g0.25_c100 := WTP_0.25 - 100]
group_summary[, Profit_g0.5_c100 := WTP_0.5 - 100]
# Profitability if cost is 175
group_summary[, Profit_g0.25_c175 := WTP_0.25 - 175]
group_summary[, Profit_g0.5_c175 := WTP_0.5 - 175]
group_summary <- group_summary[order(-WTP_0.5)]
# View the updated table
kable(group_summary[, 1:7], digits = 2) %>%
kable_styling(font_size = 8)
kable(group_summary[, 8:ncol(group_summary)], digits = 2) %>%
kable_styling(font_size = 8)
# Program Value
# Gamma = 0.25 : Success probability 25%. Churn with Incentive is 75%.
# Gamma = 0.50 : Success probability 50%. Churn with Incentive is 50%.
# Parameters
discount_rate <- 0.08
gamma_values <- c(0.25, 0.5)
groups <- 20
horizon <- 4  # 4 years
# Convert monthly churn rate and revenue to yearly
validation_data <- validation_sample
validation_data[, churn_rate_yearly := 1 - (1 - predicted_churn)^12]
validation_data[, revenue_yearly := revenue * 12]
# Group data into segments
# The segment is in the score_group column
validation_data[, score_group := as.integer(cut_number(predicted_churn, n = groups))]
# Function to calculate LTV
calculate_ltv <- function(revenue, churn_rate, discount_rate, horizon) {
ltv <- 0
for (t in 0:(horizon - 1)) {
ltv <- ltv + (revenue * (1 - churn_rate)^t) / ((1 + discount_rate)^t)
}
return(ltv)
}
# Calculate metrics for each group
group_summary <- validation_data[, .(
avg_churn_rate = mean(churn_rate_yearly),
avg_revenue = mean(revenue_yearly),
avg_ltv = calculate_ltv(mean(revenue_yearly), mean(churn_rate_yearly),
discount_rate, horizon)
), by = score_group]
# Churn Rate with incentive
group_summary[, churn_0.25 := (1-0.25) * avg_churn_rate]
group_summary[, churn_0.5 := (1-0.5) * avg_churn_rate]
group_summary[, ltv_0.25 := calculate_ltv(avg_revenue, churn_0.25, discount_rate, horizon)]
group_summary[, ltv_0.5 := calculate_ltv(avg_revenue, churn_0.5, discount_rate, horizon)]
# WTP
group_summary[, WTP_0.25 :=  ltv_0.25 - avg_ltv]
group_summary[, WTP_0.5 := ltv_0.5 - avg_ltv]
# Max WTP per 1 year
group_summary[, max_yearly_WTP_0.25 :=  WTP_0.25 / horizon]
group_summary[, max_yearly_WTP_0.5 := WTP_0.5 / horizon]
# Profitability if cost is 100
group_summary[, Profit_g0.25_c100 := WTP_0.25 - 100]
group_summary[, Profit_g0.5_c100 := WTP_0.5 - 100]
# Profitability if cost is 175
group_summary[, Profit_g0.25_c175 := WTP_0.25 - 175]
group_summary[, Profit_g0.5_c175 := WTP_0.5 - 175]
group_summary <- group_summary[order(-WTP_0.5)]
# View the updated table
kable(group_summary[, 1:7], digits = 2) %>%
kable_styling(font_size = 8)
kable(group_summary[, 8:ncol(group_summary)], digits = 2) %>%
kable_styling(font_size = 8)
View(sorted_model)
Note on questions to ask prof tmr
#Note on questions to ask prof tmr
# 1. pt 6 , use effect size to eval factors driving churn. Does p value still matter?
# 2. pt 7, am I correct tovalv ltv separately. And WTP is the value of each segment, sne the max per year is that divide by 4.
#- Also, Do I need to choose which segment or am i presenting the result in the table ?
#- Econ Value meaning = Profit ?
